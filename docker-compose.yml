services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://203.131.216.195:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  # spring-app1:
  #   image: openjdk:17
  #   container_name: kafka-producer
  #   restart: always
  #   working_dir: /app
  #   volumes:
  #     - ./spring-app:/app
  #   ports:
  #     - "8080:8080"
  #   command: ["java", "-jar", "/app/app.jar"]
  #   depends_on:
  #     - kafka
  #     - mssql-server
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:sqlserver://mssql-server:1433;databaseName=mydatabase
  #     SPRING_DATASOURCE_USERNAME: sa
  #     SPRING_DATASOURCE_PASSWORD: MyStrong!Passw0rd
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     SPRING_KAFKA_CONSUMER_GROUP_ID: my-group
  #     SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
  #     SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
  #     SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
  #     SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer

  # spring-app2:
  #   image: openjdk:17
  #   container_name: kafka-consumer
  #   restart: always
  #   working_dir: /app
  #   volumes:
  #     - ./spring-app:/app
  #   ports:
  #     - "8181:8181"
  #   command: ["java", "-jar", "/app/consumer.jar"]
  #   depends_on:
  #     - kafka
  #     - mssql-server
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:sqlserver://mssql-server:1433;databaseName=mydatabase
  #     SPRING_DATASOURCE_USERNAME: sa
  #     SPRING_DATASOURCE_PASSWORD: MyStrong!Passw0rd
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     SPRING_KAFKA_CONSUMER_GROUP_ID: my-group
  #     SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
  #     SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
  #     SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
  #     SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer



  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: myprassword
      POSTGRES_DB: cs366
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com # Email สำหรับล็อกอิน PGAdmin
      PGADMIN_DEFAULT_PASSWORD: admin # รหัสผ่านสำหรับล็อกอิน PGAdmin
    ports:
      - "4500:80" # Mapping port 80 ของ PGAdmin ไปยัง host
    depends_on:
      - postgres
